Лабораториска вежба 2 - за групите со префикс Б
Спецификација за лабораториската вежба
Во оваа вежба ќе треба да продолжите со работа во рамки на проектот од претходната лабораториска вежба.
Во класата Book додадете уште едно својство, private Long id, кое е уникатно за секоја книга. Притоа, id генерирајте за секоја книга посебно, како што е направено во рамки на аудиториската вежба.
Додадете класа BookStore во рамки на пакетот mk.ukim.finki.wp.lab.model. Во истата ќе чувате:
private Long id
private String name
private String city
private String address
Во класата Book додадете врска до класата BookStore како посебно својство под претпоставка дека една книга може да ја има само во една книжарница, а една книжарница може да има повеќе книги.
private BookStore bookStore
Креирајте BookStoreRepository класа во пакетот mk.ukim.finki.wp.lab.repository, и во неа иницијализирајте листа во која ќе има 5 различни книжарници. Во рамки на класата напишете и метод public List<BookStore> findAll() кој ги враќа сите книжарници кои постојат во системот. За секоја од книгите иницијализирајте некоја од книжарниците во атрибутот bookStore.
Во рамки на пакетот mk.ukim.finki.wp.lab.service креирајте интерфејс BookStoreService како и класа која го имплементира BookStoreServiceImpl (во impl подпакетот). Нека во овој сервис се креира метод public List<BookStore> findAll() кој го повикува соодветниот метод од BookStoreRepository.
Дефинирајте пакет mk.ukim.finki.wp.lab.web.controller и во него креирајте ја BookController класата.
Имплементирајте метод public String getBooksPage(@RequestParam(required = false) String error, Model model) кој само треба да го прикаже погледот на сите книги. Нека одговара на mapping /books. Погледот на сите книги нека биде listBooks.html, со тоа што во него ќе ги направите потребните промени со приказ на името на книжарницата каде што може да се најде книгата, притоа оставајќи ја функционалноста на избирање на книга и соодветен автор од минатата лабораториска вежба. Дополнително до секоја книга додадете две копчиња, едно кое ќе преставува линк за пренасочување кон страницата за едитирање на таа книга, и второто кое ќе овозможи бришење на книгата.
Имплементирајте метод public String saveBook() кој ќе овозможи додавање на нова книга и кој како request параметри ќе ги прими името на книгата title, isbn идентификаторот, жанрот на книгата genre, годината year и id-то на книжарницата кое корисникот ќе го бира од паѓачко мени (select компонента). Нека одговара на mapping /books/add, и при успешно додаденa нека редиректира кон погледот со сите книги.
Имплементирајте метод public String editBook(@PathVariable Long bookId) кој ќе овозможи ажурирање на книгите кој како request параметри ќе ги прими името на книгата title, isbn идентификаторот, жанрот genre, годината year, и id-то на книжарницата кое корисникот ќе го бира од паѓачко мени (<select> таг). Како предефинирани вредности на сите полиња треба да се земат од книгата која се уредува. Нека одговара на mapping /books/edit/{bookId} каде bookId е id-то на книгата што се уредува и при успешно ажурирање нека редиректира кон погледот со сите книги.
Имплементирајте метод public String deleteBook(@PathVariable Long id). Нека одговара на mapping /books/delete/{id}, и при успешно избришанa книга од листата повторно нека ја прикажува листата со книги.
Внимавајте како ќе бидат анотирани методите од барањето 6, зависно нивната функционалност.
Имајќи ги предвид методите на web слојот кои треба да ги имплементирате, креирајте ги сите потребни методи во рамки на сервисниот слој.
Имајќи ги предвид методите на service слојот кои треба да ги имплементирате, креирајте ги сите потребни методи во рамки на repository слојот.
Креирајте страна add-book.html, која треба да прикажува форма за додавање на новa книга. Истата форма би требало да се употреби и за едитирање на книга, при што за една книга може да ги менуваме само името, жанрот, isbn идентификаторот, годината и книжарницата (за ова може да искористите готов html template или пак оној од проектот од аудиториски вежби, при што соодветно ќе го прилагодите). Дополнително, имајте предвид дека за книжарницата би имале <select> таг, односно ќе може да избираме од сите книжарници кои ги има во системот.
Во рамки на listBooks.html, додадете копчe за бришење на книга и копче за едитирање на книга (во рамки на секој item во листата). Дополнително, додадете копче за додавање на новa книга кон листата (слично како што се прави во рамки на аудиториската вежба).
До овој момент треба да имате целосна функционалност на прикажување на сите книги во листата, како и бришење на една книга од истата. Повторно, потребно е да ја надополните BookController класата.
Имплементирајте метод public String getEditBookForm(), кој одговара на mapping /books/edit-form/{id}. Направете ги сите потребни промени во дефиницијата на методот за да го овозможите ова. Овој метод треба да ја прикаже add-book.html страната. Кога едитираме книга, потребно е во рамки на формата да се прикажуваат неговите моментални податоци (слично како во проектот од аудиториската вежба). Дополнително, доколку се пристапи патеката /books/edit-form/{id}, со id за кое нема книга во рамки на листата, нека се направи редирект кон листата со книги, при што ќе се прикаже и порака за грешка.
Имплементирајте метод public String getAddBookPage(), кој одговара на mapping /books/add-form и ја прикажува add-book.html страната.
Формата која се наоѓа на add-book.html страната, ќе прави POST барање кон BookController, со што ќе овозможите креирање на нова книга или пак едитирање на книга.
Функционалноста на сервлетот АuthorServlet при додавање на автор на книга, заменете ја со контролер (AuthorController) во кој ќе овозможете додавање на автори за одредена книга.
При тестирање проверете
дали успешно ја прикажувате листата со книга
дали можете да креирате нова книга, да едитирате книга и да избришете книга
дали работат функционалностите од претходната вежба со тоа што сите сервлети ќе ви бидат заменети со контролери.
дали успешно ги прикажувате сите детали за одредена книга.