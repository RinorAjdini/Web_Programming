Лабораториска вежба 3 - за групите со префикс Б
Спецификација за лабораториската вежба
Во оваа вежба ќе треба да продолжите со работа во рамки на проектот од претходната лабораториска вежба, притоа имплементирајќи перзистирање на податоците со користење на Spring Data JPA и Hibernate.
Најпрво, додадете ги соодветните зависности за spring-boot-starter-data-jpa, h2 и postgresql во рамки на pom.xml, како што е направено во проектот од аудиториски вежби.
Симнете PostgreSQL.
Креирајте два профили h2 и prod, како што е направено во рамки на аудиториските вежби. Активниот профил нека биде оној за кој конекцијата е со PostgreSQL база на податоци.
Доколку користите Docker, можете да креирате фајл docker-compose.yml, кој ќе има сличен формат како оној од аудиториските вежби. Во спротивно, внимавајте кои user и password параметри ги побарува PostgreSQL (оние кои вие сте ги ставиле при инсталацијата).
Поврзете се со базата на податоци преку IntelliJ, како што се прави во рамки на аудиториските вежби. Внимавајте на податоците за port, user, password и database. Кај вас името на базата на податоци нека биде book-store.
Во рамки на application-prod.properties, проверете дека spring.datasource.url, spring.datasource.username и spring.datasource.password се точно поставени.
Во рамки на ентитетот Author додадете својство:
private LocalDate dateOfBirth
Во истиот пакет додадете и класа Review, во која ќе чувате:
private Long id
private Integer score
private String description
private Book book
private LocalDateTime timestamp
Потребно е да класите Author, Book, BookStore, Review ги направите ентитети, кои ќе бидат соодветно мапирани во табели во базата на податоци.
Секаде каде е потребно, искористете ги @ManyToOne, @OneToMany, @ManyToMany анотациите за дефинирање на релации помеѓу табелите. Внимавајте да не креирате циклични врски.
Треба да се обезбеди целосната досегашна функционалност на апликацијата, заедно со перзистирање на податоците. За ова, направете ги соодветните промени во repository и service слојот. Поконкретно, во service слојот инјектирајте ги новите интерфејси од repository слојот, оние кои наследуваат од JpaRepository.
Дополнително, направете промена на страната каде ги прикажувате сите Reviews (рецензии) за дадена книга, односно за нив прикажувајте ја и оцената која ја имаат.
Управувањето со датуми направете го со помош на LocalDate и LocalDateTime класите од java.time библиотеката (https://www.baeldung.com/java-8-date-time-intro).

15.1. Форматот на timestamp атрибутот во Review треба да биде "yyyy-MM-dd'T'HH:mm:ss". Hint: Анотирајте го атрибутот со @DateTimeFormat и поставете вредност за pattern својството.

15.2. Форматот на dateOfBirth атрибутот во Author да биде "dd-MM-yyyy".

15.3. Додадете можност при додавање на рецензијата, корисникот да може сам да одбере датум и време на нејзино креирање, за да може да се внесе и оцена за дадената книа. За таа цел, користете ја <input type="datetime-local"/> HTML контролата. Внимавајте на начинот на кој го пречекувате timestamp параметарот кај контролерот. Потребно е да додете и @DateTimeFormat анотација со соодветниот формат на датумот и времето кои контролерот треба да ги пречека (https://www.baeldung.com/spring-date-parameters).

15.4. При преглед на сите рецензии, овозможете форматирање на датумот на креирање на рецензиите во следниот формат dd-MM-yyyy HH:mm:ss. (https://www.baeldung.com/dates-in-thymeleaf).

15.5. Направете метод во ReviewRepository со кој ќе се овозможи филтрирање на оцените во даден временски интервал [LocalDateTime from, LocalDateTime to].

Употреба на JPA Attribute Converters
Attribute Converter-ите овозможуваат методи за мапирање на JDBC типовите во Java класи и обратно.

Направете замена на атрибутите name и surname од ентитетот Author, со атрибут-класата AuthorFullname во која ќе ги содржи двата атрибута кои ги заменивме name и surname. Следете ја постапката која е објаснета на следниот ресурс: https://www.baeldung.com/jpa-attribute-converters.

16.1. Креирајте нова Java класа AuthorFullname во која ќе ги сместете променливите од тип String, name и surname. Истата треба да го имплементира интерфејсот Serializable.

16.2. Заменете ги атрибутите name и surname од ентитетот Author со нов атрибут од типот AuthorFullname.

16.3. Креирајте нова класа AuthorFullnameConverter која ќе го трансформира AuthorFullname атрибутот во соодветна колона во база и обратно. Анотирајте ја со анотацијата @Converter и направете да го имплементира интерфејсот AttributeConverter.

16.4. Имплементирајте ги методите convertToDatabaseColumn() и convertToEntityAttribute(). Првиот метод треба да направи серијализација на Java објектот во String, а вториот од String во Java објектот AuthorFullname.

16.5. Анотирајте го атрибутот AuthorFullname во Author со @Convert анотацијата.